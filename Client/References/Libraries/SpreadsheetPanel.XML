<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetPanel</name>
    </assembly>
    <members>
        <member name="T:SS.SelectionChangedHandler">
            <summary>
            The type of delegate used to register for SelectionChanged events
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:SS.SpreadsheetPanel">
            <summary>
            A panel that displays a spreadsheet with 26 columns (labeled A-Z) and 99 rows
            (labeled 1-99).  Each cell on the grid can display a non-editable string.  One 
            of the cells is always selected (and highlighted).  When the selection changes, a 
            SelectionChanged event is fired.  Clients can register to be notified of
            such events.
            
            None of the cells are editable.  They are for display purposes only.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.#ctor">
            <summary>
            Creates an empty SpreadsheetPanel
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.Clear">
            <summary>
            Clears the display.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.SetValue(System.Int32,System.Int32,System.String)">
            <summary>
            If the zero-based column and row are in range, sets the value of that
            cell and returns true.  Otherwise, returns false.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.GetValue(System.Int32,System.Int32,System.String@)">
            <summary>
            If the zero-based column and row are in range, assigns the value
            of that cell to the out parameter and returns true.  Otherwise,
            returns false.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.SetSelection(System.Int32,System.Int32)">
            <summary>
            If the zero-based column and row are in range, uses them to set
            the current selection and returns true.  Otherwise, returns false.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.GetSelection(System.Int32@,System.Int32@)">
            <summary>
            Assigns the column and row of the current selection to the
            out parameters.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="M:SS.SpreadsheetPanel.OnResize(System.EventArgs)">
            <summary>
            When the SpreadsheetPanel is resized, we set the size and locations of the three
            components that make it up.
            </summary>
            <param name="eventargs"></param>
        </member>
        <member name="F:SS.SpreadsheetPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SS.SpreadsheetPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:SS.SpreadsheetPanel.SelectionChanged">
            <summary>
            The event used to send notifications of a selection change
            </summary>
        </member>
        <member name="T:SS.SpreadsheetPanel.Address">
            <summary>
            Used internally to keep track of cell addresses
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.Address.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an Address with the given column and row
            </summary>
            <param name="c">column of Address</param>
            <param name="r">row of Address</param>
        </member>
        <member name="M:SS.SpreadsheetPanel.Address.GetHashCode">
            <summary>
            Creates and returns a HashCode relating specifically to this Address.
            Addresses which have the same row and column will have the same HashCode.
            </summary>
            <returns>int HashCode</returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.Address.Equals(System.Object)">
            <summary>
            Returns false if obj is null or not an Address.
            Two Addresses are equal if they contain the same row and column.
            </summary>
            <param name="obj">The object for comparison</param>
            <returns>bool equality</returns>
        </member>
        <member name="P:SS.SpreadsheetPanel.Address.Col">
            <summary>
            Representation of the column
            </summary>
        </member>
        <member name="P:SS.SpreadsheetPanel.Address.Row">
            <summary>
            Representation of the row
            </summary>
        </member>
        <member name="T:SS.SpreadsheetPanel.DrawingPanel">
            <summary>
            The panel where the spreadsheet grid is drawn.  It keeps track of the
            current selection as well as what is supposed to be drawn in each cell.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.#ctor(SS.SpreadsheetPanel)">
            <summary>
            Constructs a new DrawingPanel based upon the given SpreadSheetPanel
            </summary>
            <param name="ss"></param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.InvalidAddress(System.Int32,System.Int32)">
            <summary>
            Evaluates whether or not a given column and row are a valid Address.
            Valid Addresses are non-negative and less than or equal to the maximum avaliable.
            </summary>
            <param name="col">column for evaluation</param>
            <param name="row">row for evaluation</param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.Clear">
            <summary>
            Clears all input and refreshes the display
            </summary>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.SetValue(System.Int32,System.Int32,System.String)">
            <summary>
            Returns false if the column and row are an invalid address.
            If the value given is null or an empty string, the given address is cleared.
            Otherwise, the value is set.
            </summary>
            <param name="col">column of Address</param>
            <param name="row">row of Address</param>
            <param name="c">given value</param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.GetValue(System.Int32,System.Int32,System.String@)">
            <summary>
            c is set to null and false is returned if the given Address is invalid.
            Otherwise, true is returned.
            If a value has not been set, c is set to an empty string.
            </summary>
            <param name="col">column of Address</param>
            <param name="row">row of Address</param>
            <param name="c">string variable for use</param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.SetSelection(System.Int32,System.Int32)">
            <summary>
            Updates the selected row and column.
            If their Address is invalid, false is returned.
            Otherwise, the selection is updated and true is returned.
            </summary>
            <param name="col">column of Address</param>
            <param name="row">row of Address</param>
            <returns></returns>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.GetSelection(System.Int32@,System.Int32@)">
            <summary>
            Sets col and row to the current selection.
            </summary>
            <param name="col">column of Address</param>
            <param name="row">row of Address</param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.HandleHScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Refreshes the display appropriately upon a horizontal scroll
            </summary>
            <param name="sender">Object which sent the event</param>
            <param name="args">Arguments from said scroll event</param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.HandleVScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Refreshes the display appropriately upon a vertical scroll
            </summary>
            <param name="sender">Object which sent the event</param>
            <param name="args">Arguments from said scroll event</param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Details creating the display upon a redraw
            </summary>
            <param name="e">Event which will be used</param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.DrawColumnLabel(System.Drawing.Graphics,System.Int32,System.Drawing.Font)">
            <summary>
            Draws a column label.  The columns are indexed beginning with zero.
            </summary>
            <param name="g">Graphics object for use</param>
            <param name="x"></param>
            <param name="f"></param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.DrawRowLabel(System.Drawing.Graphics,System.Int32,System.Drawing.Font)">
            <summary>
            Draws a row label.  The rows are indexed beginning with zero.
            </summary>
            <param name="g"></param>
            <param name="y"></param>
            <param name="f"></param>
        </member>
        <member name="M:SS.SpreadsheetPanel.DrawingPanel.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Determines which cell, if any, was clicked.  Generates a SelectionChanged event.  All of
            the indexes are zero based.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SS.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SS.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SS.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
