<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
             <summary>
             A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
             (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
             (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
             set, and the element is already in the set, the set remains unchanged.)
             
             Given a DependencyGraph DG:
             
                (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
                    
                (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
            
             For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
                 dependents("a") = {"b", "c"}
                 dependents("b") = {"d"}
                 dependents("c") = {}
                 dependents("d") = {"d"}
                 dependees("a") = {}
                 dependees("b") = {"a"}
            
                 dependees("d") = {"b", "d"}
             </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.graph">
            <summary>
            Maps a string name to the corresponding Node
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
            <summary>
            Adds the ordered pair (s,t), if it doesn't exist
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>        
        </member>
        <member name="T:SpreadsheetUtilities.DependencyGraph.Node">
            <summary>
            A Node has a string name, and lists for it's dependents and dependees
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.#ctor(System.String)">
            <summary>
            Constructs a Node with the given name, and empty dependents and dependees.
            </summary>
            <param name="name">a string for use as the name</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.removeDependent(SpreadsheetUtilities.DependencyGraph.Node)">
            <summary>
            If this node has a given dependent, it will be removed from the dependents
            </summary>
            <param name="dependent">Node to be added to dependents</param>
            <returns>bool true if dependent exists and is removed, false if else</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.removeAllDependents">
            <summary>
            Removes all dependents
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.removeDependee(SpreadsheetUtilities.DependencyGraph.Node)">
            <summary>
            Removes given dependee if it exists, returns true if dependee removed
            </summary>
            <param name="dependee">Node for removal from dependees</param>
            <returns>bool true if Node removed from dependees, false if otherwise</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.removeAllDependees">
            <summary>
            Removes all dependees
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.addDependent(SpreadsheetUtilities.DependencyGraph.Node)">
            <summary>
            If the dependent is not already a dependent, it is added as a dependent
            </summary>
            <param name="dependent">Node to be added as dependent</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.addDependents(System.Collections.ArrayList)">
            <summary>
            Adds all Nodes in given list as dependents, if they are not already dependents
            </summary>
            <param name="newDependents">ArrayList of dependent Nodes to add</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.addDependee(SpreadsheetUtilities.DependencyGraph.Node)">
            <summary>
            Adds given dependee, if it is not already a dependee
            </summary>
            <param name="dependee">Node to be added as a dependee</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.addDependees(System.Collections.ArrayList)">
            <summary>
            Adds all Nodes given as dependees, if they are not already dependees
            </summary>
            <param name="newDependees">ArrayList of Nodes to add as dependees</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.replaceDependents(System.Collections.ArrayList)">
            <summary>
            Removes all current dependents, and adds all given dependents.
            If there are duplicates in the new dependents, only one will be added.
            </summary>
            <param name="newDependents">ArrayList of Nodes to be added as dependents</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.Node.replaceDependees(System.Collections.ArrayList)">
            <summary>
            Removes all current dependees, and adds all given dependees.
            If there are duplicates in the new dependees, only one will be added.
            </summary>
            <param name="newDependees">ArrayList of Nodes to be added as dependees</param>
        </member>
    </members>
</doc>
