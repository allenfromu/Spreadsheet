// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void OpenAssert()
        {
            #region Variable Declarations
            WinText uIItem12Text = this.UIUntitledSpreadsheetWindow.UIItem12Window.UIItem12Text;
            WinEdit uICellContentsEdit = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit;
            WinText uIB2Text = this.UIUntitledSpreadsheetWindow.UIB2Window.UIB2Text;
            #endregion

            // Verify that the 'DisplayText' property of '12' label equals '12'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItem12TextDisplayText, uIItem12Text.DisplayText);

            // Verify that the 'Text' property of 'cellContents' text box equals '=A3*A4'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellContentsEditText, uICellContentsEdit.Text);

            // Verify that the 'DisplayText' property of 'B2' label equals 'B2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIB2TextDisplayText, uIB2Text.DisplayText);
        }             
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveAssert()
        {
            #region Variable Declarations
            WinText uIItem123Text = this.UIItem123456Window.UIItem123Window.UIItem123Text;
            WinText uIB3Text = this.UIItem123456Window.UIB3Window.UIB3Text;
            #endregion

            // Verify that the 'DisplayText' property of '123' label equals '123'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItem123TextDisplayText, uIItem123Text.DisplayText);

            // Verify that the 'DisplayText' property of 'B3' label equals 'B3'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIB3TextDisplayText, uIB3Text.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void NewAssert()
        {
            #region Variable Declarations
            WinText uIB3Text = this.UIUntitledSpreadsheetWindow1.UICellValueDisplayWindow.UIB3Text;
            WinEdit uICellContentsEdit = this.UIUntitledSpreadsheetWindow1.UICellContentsWindow.UICellContentsEdit;
            #endregion

            // Verify that the 'DisplayText' property of 'B3' label equals ''
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIB3TextDisplayText, uIB3Text.DisplayText);

            // Verify that the 'Text' property of 'cellContents' text box equals ''
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UICellContentsEditText, uICellContentsEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ZeroAssert1()
        {
            #region Variable Declarations
            WinText uIERRORText = this.UIUntitledSpreadsheetWindow.UIItem12Window.UIERRORText;
            WinEdit uICellContentsEdit6 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit6;
            #endregion

            // Verify that the 'DisplayText' property of 'ERROR' label equals 'ERROR'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIERRORTextDisplayText, uIERRORText.DisplayText);

            // Verify that the 'Text' property of 'cellContents' text box equals '=10/0'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UICellContentsEdit6Text, uICellContentsEdit6.Text);
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ZeroAssert2()
        {
            #region Variable Declarations
            WinEdit uICellContentsEdit6 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit6;
            #endregion

            // Verify that the 'Text' property of 'cellContents' text box equals '=10/0'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UICellContentsEdit6Text, uICellContentsEdit6.Text);
        }
      
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void BeginOpenTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uIOpenMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIDemo2sprdListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(33, 5));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(4, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(134, 57));
        }
        
        /// <summary>
        /// RecordedMethod10
        /// </summary>
        public void EndZeroTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIDemo2TitleBar.UICloseButton;
            WinButton uINOButton = this.UIWoahthereWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(48, 20));
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void SetupHelpTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uIHelpMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(25, 14));
        }
        
        /// <summary>
        /// RecordedMethod12
        /// </summary>
        public void TearDownHelp()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIDemo2TitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(31, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 1));
        }
       
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void EndOpenTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIDemo2TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 6));
        }
      
        /// <summary>
        /// RecordedMethod28 - Use 'RecordedMethod28Params' to pass parameters into this method.
        /// </summary>
        public void TestClose()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsEdit1 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit1;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIItem123456sprdListItem.UINameEdit;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type 'Control + o' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod28Params.UICellContentsEdit1SendKeys, ModifierKeys.Control);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(174, 19));

            // Type 'Control + w' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod28Params.UICellContentsEdit1SendKeys1, ModifierKeys.Control);
        }
        
        /// <summary>
        /// RecordedMethod31 - Use 'RecordedMethod31Params' to pass parameters into this method.
        /// </summary>
        public void TestInvalidCellName()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsEdit1 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit1;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '=a0' in 'cellContents' text box
            uICellContentsEdit1.Text = this.RecordedMethod31Params.UICellContentsEdit1Text;

            // Type '{Enter}' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod31Params.UICellContentsEdit1SendKeys, ModifierKeys.None);

            // Wait for 2 seconds for user delay between actions; Type '{Escape}' in 'OK' button
            Playback.Wait(2000);
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod31Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Wait for 1 seconds for user delay between actions; Type 'Control + w' in 'cellContents' text box
            Playback.Wait(1000);
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod31Params.UICellContentsEdit1SendKeys1, ModifierKeys.Control);
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void EndSaveTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItem123456Window.UIItem123456TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 6));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void BeginSaveTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsEdit1 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit1;
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uINOButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinEdit uICellContentsEdit11 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit11;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIItem123456sprdListItem.UINameEdit;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '123' in 'cellContents' text box
            uICellContentsEdit1.Text = this.RecordedMethod5Params.UICellContentsEdit1Text;

            // Type '{Enter}{Right}' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod5Params.UICellContentsEdit1SendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(236, 94));

            // Type '=b3' in 'cellContents' text box
            uICellContentsEdit1.Text = this.RecordedMethod5Params.UICellContentsEdit1Text1;

            // Type '{Enter}' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod5Params.UICellContentsEdit1SendKeys1, ModifierKeys.None);

            // Type 'Control + s' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod5Params.UICellContentsEdit1SendKeys2, ModifierKeys.Control);

            // Select '123456' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod5Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod5Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Type 'y' in '&No' button
            Keyboard.SendKeys(uINOButton, this.RecordedMethod5Params.UINOButtonSendKeys, ModifierKeys.None);

            // Type 'Control + w' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit11, this.RecordedMethod5Params.UICellContentsEdit11SendKeys, ModifierKeys.Control);

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type 'Control + o' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod5Params.UICellContentsEdit1SendKeys3, ModifierKeys.Control);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(183, 2));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void StartNewTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(31, 11));
        }
        
        /// <summary>
        /// RecordedMethod7
        /// </summary>
        public void EndNewTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIDemo2TitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UIUntitledSpreadsheetWindow1.UIUntitledSpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(27, 8));
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void BeginZeroTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellContentsEdit1 = this.UIUntitledSpreadsheetWindow.UICellContentsWindow.UICellContentsEdit1;
            #endregion

            ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '=10/0' in 'cellContents' text box
            uICellContentsEdit1.Text = this.RecordedMethod8Params.UICellContentsEdit1Text;

            // Type '{Enter}' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit1, this.RecordedMethod8Params.UICellContentsEdit1SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod9
        /// </summary>
        public void ZeroMiddle()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIDemo2TitleBar.UICloseButton;
            WinButton uICancelButton = this.UIWoahthereWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 9));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(26, 14));
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod14ExpectedValues AssertMethod14ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod14ExpectedValues == null))
                {
                    this.mAssertMethod14ExpectedValues = new AssertMethod14ExpectedValues();
                }
                return this.mAssertMethod14ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public virtual RecordedMethod28Params RecordedMethod28Params
        {
            get
            {
                if ((this.mRecordedMethod28Params == null))
                {
                    this.mRecordedMethod28Params = new RecordedMethod28Params();
                }
                return this.mRecordedMethod28Params;
            }
        }
         
        public virtual RecordedMethod31Params RecordedMethod31Params
        {
            get
            {
                if ((this.mRecordedMethod31Params == null))
                {
                    this.mRecordedMethod31Params = new RecordedMethod31Params();
                }
                return this.mRecordedMethod31Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIUntitledSpreadsheetWindow UIUntitledSpreadsheetWindow
        {
            get
            {
                if ((this.mUIUntitledSpreadsheetWindow == null))
                {
                    this.mUIUntitledSpreadsheetWindow = new UIUntitledSpreadsheetWindow();
                }
                return this.mUIUntitledSpreadsheetWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow1();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIItem123456Window UIItem123456Window
        {
            get
            {
                if ((this.mUIItem123456Window == null))
                {
                    this.mUIItem123456Window = new UIItem123456Window();
                }
                return this.mUIItem123456Window;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIUntitledSpreadsheetWindow1 UIUntitledSpreadsheetWindow1
        {
            get
            {
                if ((this.mUIUntitledSpreadsheetWindow1 == null))
                {
                    this.mUIUntitledSpreadsheetWindow1 = new UIUntitledSpreadsheetWindow1();
                }
                return this.mUIUntitledSpreadsheetWindow1;
            }
        }
        
        public UIWoahthereWindow UIWoahthereWindow
        {
            get
            {
                if ((this.mUIWoahthereWindow == null))
                {
                    this.mUIWoahthereWindow = new UIWoahthereWindow();
                }
                return this.mUIWoahthereWindow;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod10ExpectedValues mAssertMethod10ExpectedValues;
        
        private AssertMethod11ExpectedValues mAssertMethod11ExpectedValues;
        
        private AssertMethod12ExpectedValues mAssertMethod12ExpectedValues;
        
        private AssertMethod13ExpectedValues mAssertMethod13ExpectedValues;
        
        private AssertMethod14ExpectedValues mAssertMethod14ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private RecordedMethod13Params mRecordedMethod13Params;
        
        private RecordedMethod14Params mRecordedMethod14Params;
        
        private RecordedMethod15Params mRecordedMethod15Params;
        
        private RecordedMethod16Params mRecordedMethod16Params;
        
        private RecordedMethod18Params mRecordedMethod18Params;
        
        private RecordedMethod20Params mRecordedMethod20Params;
        
        private RecordedMethod21Params mRecordedMethod21Params;
        
        private RecordedMethod22Params mRecordedMethod22Params;
        
        private RecordedMethod24Params mRecordedMethod24Params;
        
        private RecordedMethod26Params mRecordedMethod26Params;
        
        private RecordedMethod28Params mRecordedMethod28Params;
        
        private RecordedMethod29Params mRecordedMethod29Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod30Params mRecordedMethod30Params;
        
        private RecordedMethod31Params mRecordedMethod31Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIUntitledSpreadsheetWindow mUIUntitledSpreadsheetWindow;
        
        private UIOpenWindow1 mUIOpenWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIItem123456Window mUIItem123456Window;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIUntitledSpreadsheetWindow1 mUIUntitledSpreadsheetWindow1;
        
        private UIWoahthereWindow mUIWoahthereWindow;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UIErrorWindow mUIErrorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '12' label equals '12'
        /// </summary>
        public string UIItem12TextDisplayText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=A3*A4'
        /// </summary>
        public string UICellContentsEditText = "=A3*A4";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B2' label equals 'B2'
        /// </summary>
        public string UIB2TextDisplayText = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=z101'
        /// </summary>
        public string UICellContentsEdit1Text = "=z101";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B3' label equals ''
        /// </summary>
        public string UIB3TextDisplayText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'You will lose unsaved changes if you continue. Wou...' label equals 'You will lose unsaved changes if you continue. 
        ///Would you like to save?'
        /// </summary>
        public string UIYouwillloseunsavedchTextDisplayText = "You will lose unsaved changes if you continue. \nWould you like to save?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Z99' label equals 'Z99'
        /// </summary>
        public string UIZ99TextDisplayText = "Z99";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'J23' label equals 'J23'
        /// </summary>
        public string UIJ23TextDisplayText = "J23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'New: Open an empty spreadsheet in a new window. Ct...' label equals 'New: 	Open an empty spreadsheet in a new window. Ctrl+N shortcut.
        ///Save As: 	Save current spreadsheet to a file. Ctrl+S shortcut.
        ///Open: 	Open a saved spreadsheet in current window. Ctrl+O shortcut.
        ///Close: 	Close current window. Ctrl+W shortcut.
        ///
        ///Selected: 	Shows selected cell name. Change selection by clicking a rectangle on
        ///	the spreadsheet.
        ///Value: 	Shows value of the selected cell's contents. Hover over value for info.
        ///Contents: 	Shows and allows editing of the selected cell's contents. Press 'Enter' to
        ///	submit edited contents. Cells can hold numbers, text, or formulas. 
        ///	Enter a formula by preceeding numbers, cell names, and operators with
        ///	an equals sign.
        ///	E.g. =A1+2  or  =2e9/d23'
        /// </summary>
        public string UINewOpenanemptyspreadText1DisplayText = @"New: 	Open an empty spreadsheet in a new window. Ctrl+N shortcut.
Save As: 	Save current spreadsheet to a file. Ctrl+S shortcut.
Open: 	Open a saved spreadsheet in current window. Ctrl+O shortcut.
Close: 	Close current window. Ctrl+W shortcut.

Selected: 	Shows selected cell name. Change selection by clicking a rectangle on
	the spreadsheet.
Value: 	Shows value of the selected cell's contents. Hover over value for info.
Contents: 	Shows and allows editing of the selected cell's contents. Press 'Enter' to
	submit edited contents. Cells can hold numbers, text, or formulas. 
	Enter a formula by preceeding numbers, cell names, and operators with
	an equals sign.
	E.g. =A1+2  or  =2e9/d23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '123' label equals '123'
        /// </summary>
        public string UIItem123TextDisplayText = "123";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B3' label equals 'B3'
        /// </summary>
        public string UIB3TextDisplayText = "B3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B3' label equals ''
        /// </summary>
        public string UIB3TextDisplayText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals ''
        /// </summary>
        public string UICellContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR' label equals 'ERROR'
        /// </summary>
        public string UIERRORTextDisplayText = "ERROR";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=10/0'
        /// </summary>
        public string UICellContentsEdit6Text = "=10/0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=10/0'
        /// </summary>
        public string UICellContentsEdit6Text = "=10/0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'New: Open an empty spreadsheet in a new window. Sa...' label equals 'New: 	Open an empty spreadsheet in a new window.
        ///Save As: 	Save current spreadsheet to a file.
        ///Open: 	Open a saved spreadsheet in current window.
        ///Close: 	Close current window.
        ///
        ///Selected: 	Shows selected cell name. Change selection by clicking a rectangle on
        ///	the spreadsheet.
        ///Value: 	Shows value of the selected cell's contents. Hover over value for info.
        ///Contents: 	Shows and allows editing of the selected cell's contents. Press 'Enter' to
        ///	submit edited contents. Cells can hold numbers, text, or formulas. 
        ///	Enter a formula by preceeding numbers, cell names, and operators with
        ///	an equals sign.
        ///	E.g. =A1+2  or  =2e9/d23'
        /// </summary>
        public string UINewOpenanemptyspreadTextDisplayText = @"New: 	Open an empty spreadsheet in a new window.
Save As: 	Save current spreadsheet to a file.
Open: 	Open a saved spreadsheet in current window.
Close: 	Close current window.

Selected: 	Shows selected cell name. Change selection by clicking a rectangle on
	the spreadsheet.
Value: 	Shows value of the selected cell's contents. Hover over value for info.
Contents: 	Shows and allows editing of the selected cell's contents. Press 'Enter' to
	submit edited contents. Cells can hold numbers, text, or formulas. 
	Enter a formula by preceeding numbers, cell names, and operators with
	an equals sign.
	E.g. =A1+2  or  =2e9/d23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'z100 is not a defined variable.' label equals 'z100 is not a defined variable.'
        /// </summary>
        public string UIZ100isnotadefinedvarTextDisplayText = "z100 is not a defined variable.";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=z100'
        /// </summary>
        public string UICellContentsEdit1Text = "=z100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=z10'
        /// </summary>
        public string UICellContentsEdit6Text = "=z10";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ERROR' label equals 'ERROR'
        /// </summary>
        public string UIERRORTextDisplayText = "ERROR";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContents' text box equals '=z100'
        /// </summary>
        public string UICellContentsEdit1Text = "=z100";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'z100 is not a defined variable.' label equals 'z100 is not a defined variable.'
        /// </summary>
        public string UIZ100isnotadefinedvarTextDisplayText = "z100 is not a defined variable.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod13Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=z100' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=z100";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod14Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=z10' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=z10";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod15Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'z10.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "z10.sprd";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod16Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=z100' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=z100";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod18Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=z101' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=z101";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod20Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=z101' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=z101";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=z10' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text1 = "=z10";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod21'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod21Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=z0' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=z0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=z1' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text1 = "=z1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod22'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod22Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type 'Control + o' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "o";
        
        /// <summary>
        /// Type '{Delete}{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys1 = "{Delete}{Enter}";
        
        /// <summary>
        /// Type 'Control + w' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys2 = "w";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod24'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod24Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod26'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod26Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + {Up}'
        /// </summary>
        public string SendKeys1 = "{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod28'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod28Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type 'Control + o' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "o";
        
        /// <summary>
        /// Type 'Control + w' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys1 = "w";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod29'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod29Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=a0' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=a0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Escape}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Escape}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '123' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "123";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit2SendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=b3' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit3Text = "=b3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit4SendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit11SendKeys = "s";
        
        /// <summary>
        /// Select '123456' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "123456";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + w' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit12SendKeys = "w";
        
        /// <summary>
        /// Type 'Control + o' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit5SendKeys = "o";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod30'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod30Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=a0' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=a0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod31'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod31Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=a0' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=a0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        
        /// <summary>
        /// Wait for 2 seconds for user delay between actions; Type '{Escape}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Escape}";
        
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Type 'Control + w' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys1 = "w";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '123' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "123";
        
        /// <summary>
        /// Type '{Enter}{Right}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}{Right}";
        
        /// <summary>
        /// Type '=b3' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text1 = "=b3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys2 = "s";
        
        /// <summary>
        /// Select '123456' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "123456";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'y' in '&No' button
        /// </summary>
        public string UINOButtonSendKeys = "y";
        
        /// <summary>
        /// Type 'Control + w' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit11SendKeys = "w";
        
        /// <summary>
        /// Type 'Control + o' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys3 = "o";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Type '=10/0' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1Text = "=10/0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEdit1SendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIUntitledSpreadsheetWindow : WinWindow
    {
        
        public UIUntitledSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "UntitledSpreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("UntitledSpreadsheet");
            this.WindowTitles.Add("demo2");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem12Window UIItem12Window
        {
            get
            {
                if ((this.mUIItem12Window == null))
                {
                    this.mUIItem12Window = new UIItem12Window(this);
                }
                return this.mUIItem12Window;
            }
        }
        
        public UICellContentsWindow UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UIB2Window UIB2Window
        {
            get
            {
                if ((this.mUIB2Window == null))
                {
                    this.mUIB2Window = new UIB2Window(this);
                }
                return this.mUIB2Window;
            }
        }
        
        public UIDemo2TitleBar UIDemo2TitleBar
        {
            get
            {
                if ((this.mUIDemo2TitleBar == null))
                {
                    this.mUIDemo2TitleBar = new UIDemo2TitleBar(this);
                }
                return this.mUIDemo2TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItem12Window mUIItem12Window;
        
        private UICellContentsWindow mUICellContentsWindow;
        
        private UIB2Window mUIB2Window;
        
        private UIDemo2TitleBar mUIDemo2TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("demo2");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("demo2");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem12Window : WinWindow
    {
        
        public UIItem12Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueDisplay";
            this.WindowTitles.Add("demo2");
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIItem12Text
        {
            get
            {
                if ((this.mUIItem12Text == null))
                {
                    this.mUIItem12Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem12Text.SearchProperties[WinText.PropertyNames.Name] = "12";
                    this.mUIItem12Text.WindowTitles.Add("demo2");
                    #endregion
                }
                return this.mUIItem12Text;
            }
        }
        
        public WinText UIERRORText
        {
            get
            {
                if ((this.mUIERRORText == null))
                {
                    this.mUIERRORText = new WinText(this);
                    #region Search Criteria
                    this.mUIERRORText.SearchProperties[WinText.PropertyNames.Name] = "ERROR";
                    this.mUIERRORText.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIERRORText;
            }
        }
        
        public WinText UIB3Text
        {
            get
            {
                if ((this.mUIB3Text == null))
                {
                    this.mUIB3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB3Text.SearchProperties[WinText.PropertyNames.Name] = "B3";
                    this.mUIB3Text.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIB3Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem12Text;
        
        private WinText mUIERRORText;
        
        private WinText mUIB3Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentsWindow : WinWindow
    {
        
        public UICellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContents";
            this.WindowTitles.Add("demo2");
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "12";
                    this.mUICellContentsEdit.WindowTitles.Add("demo2");
                    #endregion
                }
                return this.mUICellContentsEdit;
            }
        }
        
        public WinEdit UICellContentsEdit1
        {
            get
            {
                if ((this.mUICellContentsEdit1 == null))
                {
                    this.mUICellContentsEdit1 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit1.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit1;
            }
        }
        
        public WinEdit UICellContentsEdit2
        {
            get
            {
                if ((this.mUICellContentsEdit2 == null))
                {
                    this.mUICellContentsEdit2 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit2.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit2;
            }
        }
        
        public WinEdit UICellContentsEdit3
        {
            get
            {
                if ((this.mUICellContentsEdit3 == null))
                {
                    this.mUICellContentsEdit3 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit3.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit3;
            }
        }
        
        public WinEdit UICellContentsEdit4
        {
            get
            {
                if ((this.mUICellContentsEdit4 == null))
                {
                    this.mUICellContentsEdit4 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit4.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit4;
            }
        }
        
        public WinEdit UICellContentsEdit11
        {
            get
            {
                if ((this.mUICellContentsEdit11 == null))
                {
                    this.mUICellContentsEdit11 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit11.SearchProperties[WinEdit.PropertyNames.Name] = "123";
                    this.mUICellContentsEdit11.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit11;
            }
        }
        
        public WinEdit UICellContentsEdit12
        {
            get
            {
                if ((this.mUICellContentsEdit12 == null))
                {
                    this.mUICellContentsEdit12 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit12.SearchProperties[WinEdit.PropertyNames.Name] = "123";
                    this.mUICellContentsEdit12.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit12;
            }
        }
        
        public WinEdit UICellContentsEdit5
        {
            get
            {
                if ((this.mUICellContentsEdit5 == null))
                {
                    this.mUICellContentsEdit5 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit5.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit5;
            }
        }
        
        public WinEdit UICellContentsEdit6
        {
            get
            {
                if ((this.mUICellContentsEdit6 == null))
                {
                    this.mUICellContentsEdit6 = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit6.SearchProperties[WinEdit.PropertyNames.Name] = "ERROR";
                    this.mUICellContentsEdit6.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit6;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        
        private WinEdit mUICellContentsEdit1;
        
        private WinEdit mUICellContentsEdit2;
        
        private WinEdit mUICellContentsEdit3;
        
        private WinEdit mUICellContentsEdit4;
        
        private WinEdit mUICellContentsEdit11;
        
        private WinEdit mUICellContentsEdit12;
        
        private WinEdit mUICellContentsEdit5;
        
        private WinEdit mUICellContentsEdit6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIB2Window : WinWindow
    {
        
        public UIB2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellSelectedDisplay";
            this.WindowTitles.Add("demo2");
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIB2Text
        {
            get
            {
                if ((this.mUIB2Text == null))
                {
                    this.mUIB2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB2Text.SearchProperties[WinText.PropertyNames.Name] = "B2";
                    this.mUIB2Text.WindowTitles.Add("demo2");
                    #endregion
                }
                return this.mUIB2Text;
            }
        }
        
        public WinText UIZ99Text
        {
            get
            {
                if ((this.mUIZ99Text == null))
                {
                    this.mUIZ99Text = new WinText(this);
                    #region Search Criteria
                    this.mUIZ99Text.SearchProperties[WinText.PropertyNames.Name] = "Z99";
                    this.mUIZ99Text.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIZ99Text;
            }
        }
        
        public WinText UIJ23Text
        {
            get
            {
                if ((this.mUIJ23Text == null))
                {
                    this.mUIJ23Text = new WinText(this);
                    #region Search Criteria
                    this.mUIJ23Text.SearchProperties[WinText.PropertyNames.Name] = "J23";
                    this.mUIJ23Text.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIJ23Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIB2Text;
        
        private WinText mUIZ99Text;
        
        private WinText mUIJ23Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDemo2TitleBar : WinTitleBar
    {
        
        public UIDemo2TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("demo2");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("demo2");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemo2sprdListItem UIDemo2sprdListItem
        {
            get
            {
                if ((this.mUIDemo2sprdListItem == null))
                {
                    this.mUIDemo2sprdListItem = new UIDemo2sprdListItem(this);
                }
                return this.mUIDemo2sprdListItem;
            }
        }
        
        public UIItem123456sprdListItem UIItem123456sprdListItem
        {
            get
            {
                if ((this.mUIItem123456sprdListItem == null))
                {
                    this.mUIItem123456sprdListItem = new UIItem123456sprdListItem(this);
                }
                return this.mUIItem123456sprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemo2sprdListItem mUIDemo2sprdListItem;
        
        private UIItem123456sprdListItem mUIItem123456sprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDemo2sprdListItem : WinListItem
    {
        
        public UIDemo2sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo2.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem123456sprdListItem : WinListItem
    {
        
        public UIItem123456sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "123456.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem123456Window : WinWindow
    {
        
        public UIItem123456Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "123456";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("123456");
            #endregion
        }
        
        #region Properties
        public UIItem123Window UIItem123Window
        {
            get
            {
                if ((this.mUIItem123Window == null))
                {
                    this.mUIItem123Window = new UIItem123Window(this);
                }
                return this.mUIItem123Window;
            }
        }
        
        public UIB3Window UIB3Window
        {
            get
            {
                if ((this.mUIB3Window == null))
                {
                    this.mUIB3Window = new UIB3Window(this);
                }
                return this.mUIB3Window;
            }
        }
        
        public UIItem123456TitleBar UIItem123456TitleBar
        {
            get
            {
                if ((this.mUIItem123456TitleBar == null))
                {
                    this.mUIItem123456TitleBar = new UIItem123456TitleBar(this);
                }
                return this.mUIItem123456TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItem123Window mUIItem123Window;
        
        private UIB3Window mUIB3Window;
        
        private UIItem123456TitleBar mUIItem123456TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem123Window : WinWindow
    {
        
        public UIItem123Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueDisplay";
            this.WindowTitles.Add("123456");
            #endregion
        }
        
        #region Properties
        public WinText UIItem123Text
        {
            get
            {
                if ((this.mUIItem123Text == null))
                {
                    this.mUIItem123Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem123Text.SearchProperties[WinText.PropertyNames.Name] = "123";
                    this.mUIItem123Text.WindowTitles.Add("123456");
                    #endregion
                }
                return this.mUIItem123Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem123Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIB3Window : WinWindow
    {
        
        public UIB3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellSelectedDisplay";
            this.WindowTitles.Add("123456");
            #endregion
        }
        
        #region Properties
        public WinText UIB3Text
        {
            get
            {
                if ((this.mUIB3Text == null))
                {
                    this.mUIB3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB3Text.SearchProperties[WinText.PropertyNames.Name] = "B3";
                    this.mUIB3Text.WindowTitles.Add("123456");
                    #endregion
                }
                return this.mUIB3Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIB3Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem123456TitleBar : WinTitleBar
    {
        
        public UIItem123456TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("123456");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("123456");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIUntitledSpreadsheetWindow1 : WinWindow
    {
        
        public UIUntitledSpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "UntitledSpreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public UICellValueDisplayWindow UICellValueDisplayWindow
        {
            get
            {
                if ((this.mUICellValueDisplayWindow == null))
                {
                    this.mUICellValueDisplayWindow = new UICellValueDisplayWindow(this);
                }
                return this.mUICellValueDisplayWindow;
            }
        }
        
        public UICellContentsWindow1 UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow1(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UIUntitledSpreadsheetTitleBar UIUntitledSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIUntitledSpreadsheetTitleBar == null))
                {
                    this.mUIUntitledSpreadsheetTitleBar = new UIUntitledSpreadsheetTitleBar(this);
                }
                return this.mUIUntitledSpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICellValueDisplayWindow mUICellValueDisplayWindow;
        
        private UICellContentsWindow1 mUICellContentsWindow;
        
        private UIUntitledSpreadsheetTitleBar mUIUntitledSpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellValueDisplayWindow : WinWindow
    {
        
        public UICellValueDisplayWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueDisplay";
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIB3Text
        {
            get
            {
                if ((this.mUIB3Text == null))
                {
                    this.mUIB3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB3Text.SearchProperties[WinText.PropertyNames.Name] = "B3";
                    this.mUIB3Text.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUIB3Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIB3Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentsWindow1 : WinWindow
    {
        
        public UICellContentsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContents";
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIUntitledSpreadsheetTitleBar : WinTitleBar
    {
        
        public UIUntitledSpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("UntitledSpreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("UntitledSpreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWoahthereWindow : WinWindow
    {
        
        public UIWoahthereWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Woah there!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Woah there!");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIYouwillloseunsavedchWindow UIYouwillloseunsavedchWindow
        {
            get
            {
                if ((this.mUIYouwillloseunsavedchWindow == null))
                {
                    this.mUIYouwillloseunsavedchWindow = new UIYouwillloseunsavedchWindow(this);
                }
                return this.mUIYouwillloseunsavedchWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private UIYouwillloseunsavedchWindow mUIYouwillloseunsavedchWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Woah there!");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Woah there!");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Woah there!");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Woah there!");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Woah there!");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Woah there!");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYouwillloseunsavedchWindow : WinWindow
    {
        
        public UIYouwillloseunsavedchWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Woah there!");
            #endregion
        }
        
        #region Properties
        public WinText UIYouwillloseunsavedchText
        {
            get
            {
                if ((this.mUIYouwillloseunsavedchText == null))
                {
                    this.mUIYouwillloseunsavedchText = new WinText(this);
                    #region Search Criteria
                    this.mUIYouwillloseunsavedchText.SearchProperties[WinText.PropertyNames.Name] = "You will lose unsaved changes if you continue. Would you like to save?";
                    this.mUIYouwillloseunsavedchText.WindowTitles.Add("Woah there!");
                    #endregion
                }
                return this.mUIYouwillloseunsavedchText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIYouwillloseunsavedchText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UINewOpenanemptyspreadWindow UINewOpenanemptyspreadWindow
        {
            get
            {
                if ((this.mUINewOpenanemptyspreadWindow == null))
                {
                    this.mUINewOpenanemptyspreadWindow = new UINewOpenanemptyspreadWindow(this);
                }
                return this.mUINewOpenanemptyspreadWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewOpenanemptyspreadWindow mUINewOpenanemptyspreadWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINewOpenanemptyspreadWindow : WinWindow
    {
        
        public UINewOpenanemptyspreadWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinText UINewOpenanemptyspreadText
        {
            get
            {
                if ((this.mUINewOpenanemptyspreadText == null))
                {
                    this.mUINewOpenanemptyspreadText = new WinText(this);
                    #region Search Criteria
                    this.mUINewOpenanemptyspreadText.SearchProperties[WinText.PropertyNames.Name] = @"New: 	Open an empty spreadsheet in a new window.Save As: 	Save current spreadsheet to a file.Open: 	Open a saved spreadsheet in current window.Close: 	Close current window.Selected: 	Shows selected cell name. Change selection by clicking a rectangle on	the spreadsheet.Value: 	Shows value of the selected cell's contents. Hover over value for info.Contents: 	Shows and allows editing of the selected cell's contents. Press 'Enter' to	submit edited contents. Cells can hold numbers, text, or formulas. 	Enter a formula by preceeding numbers, cell names, and operators with	an equals sign.	E.g. =A1+2  or  =2e9/d23";
                    this.mUINewOpenanemptyspreadText.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUINewOpenanemptyspreadText;
            }
        }
        
        public WinText UINewOpenanemptyspreadText1
        {
            get
            {
                if ((this.mUINewOpenanemptyspreadText1 == null))
                {
                    this.mUINewOpenanemptyspreadText1 = new WinText(this);
                    #region Search Criteria
                    this.mUINewOpenanemptyspreadText1.SearchProperties[WinText.PropertyNames.Name] = @"New: 	Open an empty spreadsheet in a new window. Ctrl+N shortcut.Save As: 	Save current spreadsheet to a file. Ctrl+S shortcut.Open: 	Open a saved spreadsheet in current window. Ctrl+O shortcut.Close: 	Close current window. Ctrl+W shortcut.Selected: 	Shows selected cell name. Change selection by clicking a rectangle on	the spreadsheet.Value: 	Shows value of the selected cell's contents. Hover over value for info.Contents: 	Shows and allows editing of the selected cell's contents. Press 'Enter' to	submit edited contents. Cells can hold numbers, text, or formulas. 	Enter a formula by preceeding numbers, cell names, and operators with	an equals sign.	E.g. =A1+2  or  =2e9/d23";
                    this.mUINewOpenanemptyspreadText1.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUINewOpenanemptyspreadText1;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINewOpenanemptyspreadText;
        
        private WinText mUINewOpenanemptyspreadText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIZ100isnotadefinedvarWindow UIZ100isnotadefinedvarWindow
        {
            get
            {
                if ((this.mUIZ100isnotadefinedvarWindow == null))
                {
                    this.mUIZ100isnotadefinedvarWindow = new UIZ100isnotadefinedvarWindow(this);
                }
                return this.mUIZ100isnotadefinedvarWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIErrorTitleBar UIErrorTitleBar
        {
            get
            {
                if ((this.mUIErrorTitleBar == null))
                {
                    this.mUIErrorTitleBar = new UIErrorTitleBar(this);
                }
                return this.mUIErrorTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIZ100isnotadefinedvarWindow mUIZ100isnotadefinedvarWindow;
        
        private UIOKWindow1 mUIOKWindow;
        
        private UIErrorTitleBar mUIErrorTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIZ100isnotadefinedvarWindow : WinWindow
    {
        
        public UIZ100isnotadefinedvarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinText UIZ100isnotadefinedvarText
        {
            get
            {
                if ((this.mUIZ100isnotadefinedvarText == null))
                {
                    this.mUIZ100isnotadefinedvarText = new WinText(this);
                    #region Search Criteria
                    this.mUIZ100isnotadefinedvarText.SearchProperties[WinText.PropertyNames.Name] = "z100 is not a defined variable.";
                    this.mUIZ100isnotadefinedvarText.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIZ100isnotadefinedvarText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIZ100isnotadefinedvarText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIErrorTitleBar : WinTitleBar
    {
        
        public UIErrorTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
